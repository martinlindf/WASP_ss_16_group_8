#include "ros/ros.h"
#include "math.h"
#include "geometry_msgs/Twist.h"
#include "ardrone_autonomy/Navdata.h"
float turtle_tag_orientation;
float turtle_tag_pos_x;
float turtle_tag_pos_y;
float tag_orientation_sp = 180;

void chatterCallback(const ardrone_autonomy::Navdata::ConstPtr& msg)
{
//  ROS_INFO("I heard: [%f]", msg->tags_orientation);
//  printf("I heard: [%p]", msg->tags_orientation.data());  
   if (msg->tags_orientation.data() != NULL){
     ROS_INFO("I heard: [%f]", *(msg->tags_orientation.data()));
     turtle_tag_orientation = *(msg->tags_orientation.data());
     turtle_tag_pos_x = *(msg->tags_xc.data());
     turtle_tag_pos_y = *(msg->tags_yc.data());
   }
   else {
     turtle_tag_orientation = tag_orientation_sp;
     turtle_tag_pos_x = 0;
     turtle_tag_pos_y = 0;
   }
}

/**
 * This tutorial demonstrates simple sending of messages over the ROS system.
 */
int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "yaws_controller");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The advertise() function is how you tell ROS that you want to
   * publish on a given topic name. This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. After this advertise() call is made, the master
   * node will notify anyone who is trying to subscribe to this topic name,
   * and they will in turn negotiate a peer-to-peer connection with this
   * node.  advertise() returns a Publisher object which allows you to
   * publish messages on that topic through a call to publish().  Once
   * all copies of the returned Publisher object are destroyed, the topic
   * will be automatically unadvertised.
   *
   * The second parameter to advertise() is the size of the message queue
   * used for publishing messages.  If messages are published more quickly
   * than we can send them, the number here specifies how many messages to
   * buffer up before throwing some away.
   */
  ros::Publisher yaws_pub = n.advertise<geometry_msgs::Twist>("cmd_vel", 1000);
  ros::Subscriber yaws_sub = n.subscribe("/ardrone/navdata", 1000, chatterCallback);

  ros::Rate loop_rate(30);

  /**
   * A count of how many messages we have sent. This is used to create
   * a unique string for each message.
   */
  float e;
  float ctrl_lim = 5;
  float k_p = 0.1;
  while (ros::ok())
  {
    /**
     * This is a message object. You stuff it with data, and then publish it.
     */
    geometry_msgs::Twist msg;

   e = turtle_tag_orientation - tag_orientation_sp;
   msg.angular.z = fmin(fmax(k_p*e, -ctrl_lim), ctrl_lim);

   e = turtle_tag_pos_x;
   msg.linear.x = fmin(fmax(k_p*e, -ctrl_lim), ctrl_lim);
   e = turtle_tag_pos_y;
   msg.linear.y = fmin(fmax(k_p*e, -ctrl_lim), ctrl_lim);


/*    msg.angular.z = 0;
    if (turtle_tag_orientation - tag_orientation_sp > 10){ 
	msg.angular.z = -20;
    }
    else if (turtle_tag_orientation - tag_orientation_sp < -10){
	msg.angular.z = 20;
    }
*/
    /**
     * The publish() function is how you send messages. The parameter
     * is the message object. The type of this object must agree with the type
     * given as a template parameter to the advertise<>() call, as was done
     * in the constructor above.
     */
    yaws_pub.publish(msg);

    ros::spinOnce();

    loop_rate.sleep();
  }


  return 0;
}

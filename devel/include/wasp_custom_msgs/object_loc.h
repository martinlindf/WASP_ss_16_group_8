// Generated by gencpp from file wasp_custom_msgs/object_loc.msg
// DO NOT EDIT!


#ifndef WASP_CUSTOM_MSGS_MESSAGE_OBJECT_LOC_H
#define WASP_CUSTOM_MSGS_MESSAGE_OBJECT_LOC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace wasp_custom_msgs
{
template <class ContainerAllocator>
struct object_loc_
{
  typedef object_loc_<ContainerAllocator> Type;

  object_loc_()
    : ID(0)
    , point()  {
    }
  object_loc_(const ContainerAllocator& _alloc)
    : ID(0)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _ID_type;
  _ID_type ID;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;




  typedef boost::shared_ptr< ::wasp_custom_msgs::object_loc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wasp_custom_msgs::object_loc_<ContainerAllocator> const> ConstPtr;

}; // struct object_loc_

typedef ::wasp_custom_msgs::object_loc_<std::allocator<void> > object_loc;

typedef boost::shared_ptr< ::wasp_custom_msgs::object_loc > object_locPtr;
typedef boost::shared_ptr< ::wasp_custom_msgs::object_loc const> object_locConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wasp_custom_msgs::object_loc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wasp_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'wasp_custom_msgs': ['/home/wasp/catkin_ws/src/wasp_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wasp_custom_msgs::object_loc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wasp_custom_msgs::object_loc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wasp_custom_msgs::object_loc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4453fe97d6d3223f879ac5a9613204a";
  }

  static const char* value(const ::wasp_custom_msgs::object_loc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4453fe97d6d3223ULL;
  static const uint64_t static_value2 = 0xf879ac5a9613204aULL;
};

template<class ContainerAllocator>
struct DataType< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wasp_custom_msgs/object_loc";
  }

  static const char* value(const ::wasp_custom_msgs::object_loc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Custom message for publishing the detected object position\n\
#object_loc.msg\n\
int16 ID\n\
geometry_msgs/Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::wasp_custom_msgs::object_loc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_loc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wasp_custom_msgs::object_loc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wasp_custom_msgs::object_loc_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WASP_CUSTOM_MSGS_MESSAGE_OBJECT_LOC_H
